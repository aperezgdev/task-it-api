// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: status.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStatus = `-- name: DeleteStatus :exec
DELETE FROM statuses WHERE id = $1
`

func (q *Queries) DeleteStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStatus, id)
	return err
}

const findStatus = `-- name: FindStatus :one
SELECT 
  s.id, 
  s.title,
  s.board_id,
  COALESCE(
    array_agg(ss.next_status) FILTER (WHERE ss.status_id IS NOT NULL),
    ARRAY[]::UUID[]
  ) as next_status,
  COALESCE(
    array_agg(ss.previous_status) FILTER (WHERE ss.status_id IS NOT NULL),
    ARRAY[]::UUID[]
  ) as previous_status,
  s.created_at
FROM statuses s
LEFT JOIN statuses_next_statuses ss ON ss.status_id = s.id
LEFT JOIN statuses_previous_statuses ssp ON ssp.status_id = s.id
WHERE s.id = $1
`

type FindStatusRow struct {
	ID             uuid.UUID
	Title          string
	BoardID        uuid.UUID
	NextStatus     interface{}
	PreviousStatus interface{}
	CreatedAt      pgtype.Timestamp
}

func (q *Queries) FindStatus(ctx context.Context, id uuid.UUID) (FindStatusRow, error) {
	row := q.db.QueryRow(ctx, findStatus, id)
	var i FindStatusRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.BoardID,
		&i.NextStatus,
		&i.PreviousStatus,
		&i.CreatedAt,
	)
	return i, err
}

const saveStatus = `-- name: SaveStatus :one
INSERT INTO statuses (id, title, board_id, created_at) VALUES ($1, $2, $3, $4) RETURNING id, title, board_id, created_at
`

type SaveStatusParams struct {
	ID        uuid.UUID
	Title     string
	BoardID   uuid.UUID
	CreatedAt pgtype.Timestamp
}

func (q *Queries) SaveStatus(ctx context.Context, arg SaveStatusParams) (Status, error) {
	row := q.db.QueryRow(ctx, saveStatus,
		arg.ID,
		arg.Title,
		arg.BoardID,
		arg.CreatedAt,
	)
	var i Status
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.BoardID,
		&i.CreatedAt,
	)
	return i, err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE statuses SET title = $2, board_id = $3, created_at = $4 WHERE id = $1
`

type UpdateStatusParams struct {
	ID        uuid.UUID
	Title     string
	BoardID   uuid.UUID
	CreatedAt pgtype.Timestamp
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus,
		arg.ID,
		arg.Title,
		arg.BoardID,
		arg.CreatedAt,
	)
	return err
}
