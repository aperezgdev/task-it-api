// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: team.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const findTeam = `-- name: FindTeam :one
SELECT 
  t.id, 
  t.title,
  t.description, 
  t.owner,
  COALESCE(
    array_agg(tu.user_id) FILTER (WHERE tu.team_id IS NOT NULL),
    ARRAY[]::UUID[]
  ) as members,
  t.created_at
FROM teams t
LEFT JOIN teams_users tu ON tu.team_id = t.id
WHERE t.id = $1
`

type FindTeamRow struct {
	ID          uuid.UUID
	Title       string
	Description string
	Owner       uuid.UUID
	Members     interface{}
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) FindTeam(ctx context.Context, id uuid.UUID) (FindTeamRow, error) {
	row := q.db.QueryRow(ctx, findTeam, id)
	var i FindTeamRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Owner,
		&i.Members,
		&i.CreatedAt,
	)
	return i, err
}

const saveTeam = `-- name: SaveTeam :one
INSERT INTO teams (id, title, description, owner, created_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, title, description, owner, created_at
`

type SaveTeamParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Owner       uuid.UUID
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) SaveTeam(ctx context.Context, arg SaveTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, saveTeam,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Owner,
		arg.CreatedAt,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE teams SET title = $2, description = $3, owner = $4, created_at = $5 WHERE id = $1
`

type UpdateTeamParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Owner       uuid.UUID
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.Exec(ctx, updateTeam,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Owner,
		arg.CreatedAt,
	)
	return err
}
