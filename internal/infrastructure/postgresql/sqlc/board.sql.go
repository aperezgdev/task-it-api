// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: board.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM boards WHERE id = $1
`

func (q *Queries) DeleteBoard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBoard, id)
	return err
}

const findBoard = `-- name: FindBoard :one
SELECT id, title, description, owner, team_id, created_at FROM boards WHERE id = $1
`

func (q *Queries) FindBoard(ctx context.Context, id uuid.UUID) (Board, error) {
	row := q.db.QueryRow(ctx, findBoard, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Owner,
		&i.TeamID,
		&i.CreatedAt,
	)
	return i, err
}

const saveBoard = `-- name: SaveBoard :one
INSERT INTO boards (id, title, description, owner, team_id, created_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, title, description, owner, team_id, created_at
`

type SaveBoardParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Owner       uuid.UUID
	TeamID      uuid.UUID
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) SaveBoard(ctx context.Context, arg SaveBoardParams) (Board, error) {
	row := q.db.QueryRow(ctx, saveBoard,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Owner,
		arg.TeamID,
		arg.CreatedAt,
	)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Owner,
		&i.TeamID,
		&i.CreatedAt,
	)
	return i, err
}

const updateBoard = `-- name: UpdateBoard :exec
UPDATE boards SET title = $2, description = $3, owner = $4, team_id = $5, created_at = $6 WHERE id = $1
`

type UpdateBoardParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Owner       uuid.UUID
	TeamID      uuid.UUID
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) error {
	_, err := q.db.Exec(ctx, updateBoard,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Owner,
		arg.TeamID,
		arg.CreatedAt,
	)
	return err
}
