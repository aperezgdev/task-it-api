// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const findTask = `-- name: FindTask :one
SELECT id, title, description, creator, asigned, status_id, created_at FROM tasks WHERE id = $1
`

func (q *Queries) FindTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, findTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Creator,
		&i.Asigned,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}

const saveTask = `-- name: SaveTask :one
INSERT INTO tasks (id, title, description, creator, asigned, status_id, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, title, description, creator, asigned, status_id, created_at
`

type SaveTaskParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Creator     uuid.UUID
	Asigned     uuid.UUID
	StatusID    uuid.UUID
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) SaveTask(ctx context.Context, arg SaveTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, saveTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Creator,
		arg.Asigned,
		arg.StatusID,
		arg.CreatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Creator,
		&i.Asigned,
		&i.StatusID,
		&i.CreatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET title = $2, description = $3, creator = $4, asigned = $5, status_id = $6, created_at = $7 WHERE id = $1
`

type UpdateTaskParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	Creator     uuid.UUID
	Asigned     uuid.UUID
	StatusID    uuid.UUID
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Creator,
		arg.Asigned,
		arg.StatusID,
		arg.CreatedAt,
	)
	return err
}
